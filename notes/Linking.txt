To build storybook friendly links we are using callback links rather
than using react-router-dom NavLinks. This allows us to test functionality
and when we start writing unit tests these links will be fully testable.

Example
./example/components/ExamplePage.tsx

    // Add a new prop to the Props interface
    interface Props extends WithStyles<typeof styles> {
        onCustomClick?: () => void
    }

    class Example extends Component<Props> {
        // Do logic if needed in the handleCustomClick function
        handleCustomClick = () => {
            // Grab the onCustomClick prop from interface
            const { onCustomClick } = this.props

            // Check click and call the custom click from ExamplePageContainer > mapStoreToProps 
            if (onCustomClick) onCustomClick()
        }

        render() {
            return {
                <div onClick={this.handleCustomClick}></div>
            }
        }
    }

./example/ExamplePageContainer.tsx

    const handleCustomClick = (store: RootStore) => {
        store.routing.push('/settings/smart-start')
    }

    const mapStoreToProps = (store: RootStore) => ({
        onCustomClick: () => handleCustomClick(store),
        --OR--
        onCustomClick: () => store.routing.push('/settings/smart-start'),
    })
